/**
 * Meal Count Setting Page
 * @description 사업장별 식수 입력 마감시간 설정 페이지 (재설계 v2)
 */

import { Button, Space, message, Modal, Form, Switch, TimePicker, Card, Tag, Input, Row, Col, Table, Alert, Divider } from 'antd';
import { CopyOutlined, EditOutlined } from '@ant-design/icons';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { getSites } from '@/api/site.api';
import { getMealCountSetting, upsertMealCountSetting } from '@/api/meal-count.api';
import type { MealCountSetting } from '@/api/meal-count.api';
import { useState, useMemo, useEffect } from 'react';
import dayjs from 'dayjs';
import type { TableRowSelection } from 'antd/es/table/interface';

interface SiteWithSetting {
  siteId: string;
  siteName: string;
  siteType: string;
  division: string;
  setting?: MealCountSetting;
}

const SITE_TYPE_LABELS: Record<string, string> = {
  LUNCHBOX: '도시락',
  DELIVERY: '운반',
  CONSIGNMENT: '위탁',
  EVENT: '이벤트',
};

const SITE_TYPE_COLORS: Record<string, string> = {
  LUNCHBOX: 'blue',
  DELIVERY: 'green',
  CONSIGNMENT: 'orange',
  EVENT: 'purple',
};

export default function MealCountSettingPage() {
  console.log('🚀🚀🚀 MealCountSettingPage 컴포넌트 로드됨! (최신 버전 v2.0) 🚀🚀🚀');

  const queryClient = useQueryClient();
  const [modalVisible, setModalVisible] = useState(false);
  const [currentSiteId, setCurrentSiteId] = useState<string | undefined>();
  const [copyMode, setCopyMode] = useState(false);
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);
  const [form] = Form.useForm();

  // 메뉴 개수 상태 관리
  const [breakfastCount, setBreakfastCount] = useState(1);
  const [lunchCount, setLunchCount] = useState(1);
  const [dinnerCount, setDinnerCount] = useState(1);
  const [supperCount, setSupperCount] = useState(1);

  // 사업장 목록 조회
  const { data: sites, isLoading: sitesLoading } = useQuery({
    queryKey: ['sites'],
    queryFn: () => getSites({ isActive: true }),
  });

  // 모든 사업장의 설정 조회
  const { data: allSettings, isLoading: settingsLoading, refetch: refetchSettings } = useQuery({
    queryKey: ['meal-count-settings-all'],
    queryFn: async () => {
      console.log('[MealCountSetting] Fetching all settings...');
      if (!sites?.data?.sites) return {};
      const promises = sites.data.sites.map((site: any) =>
        getMealCountSetting(site.id)
          .then(res => {
            console.log(`[MealCountSetting] Fetched setting for ${site.name}:`, res.data);
            return { siteId: site.id, setting: res.data };
          })
          .catch(() => {
            console.log(`[MealCountSetting] No setting found for ${site.name}`);
            return { siteId: site.id, setting: null };
          })
      );
      const results = await Promise.all(promises);
      const settingsMap: Record<string, MealCountSetting | null> = {};
      results.forEach(r => {
        settingsMap[r.siteId] = r.setting;
      });
      console.log('[MealCountSetting] All settings loaded:', settingsMap);
      return settingsMap;
    },
    enabled: !!sites?.data?.sites,
    staleTime: 0, // 항상 최신 데이터 가져오기
    gcTime: 0, // 캐시 즉시 만료 (React Query v5)
    refetchOnMount: 'always', // 마운트 시 항상 리프레시
    refetchOnWindowFocus: true, // 윈도우 포커스 시 리프레시
  });

  // 전체 사업장 리스트 (설정 유무와 관계없이)
  const allSitesList = useMemo<SiteWithSetting[]>(() => {
    if (!sites?.data?.sites) return [];
    console.log('[MealCountSetting] Building sites list. allSettings:', allSettings);
    return sites.data.sites.map((site: any) => ({
      siteId: site.id,
      siteName: site.name,
      siteType: site.type,
      division: site.division,
      setting: allSettings?.[site.id] || undefined,
    }));
  }, [sites, allSettings]);

  // 설정 저장 Mutation
  const saveMutation = useMutation({
    mutationFn: async (data: { siteId: string; setting: Partial<MealCountSetting> }) =>
      upsertMealCountSetting(data.siteId, data.setting),
    onSuccess: async (response, variables) => {
      console.log('🎉 [MealCountSetting] Save successful!');
      console.log('📦 [MealCountSetting] Server response:', response);
      message.success('설정이 저장되었습니다');

      // 1. 모든 관련 쿼리 무효화
      console.log('🗑️ [MealCountSetting] Invalidating queries...');
      await queryClient.invalidateQueries({
        queryKey: ['meal-count-settings-all'],
        refetchType: 'all'
      });

      // 2. 작은 지연 후 강제 리프레시
      console.log('⏳ [MealCountSetting] Waiting for server sync...');
      await new Promise(resolve => setTimeout(resolve, 300));

      // 3. 다시 한번 refetch 호출
      console.log('🔄 [MealCountSetting] Refetching data...');
      await refetchSettings();
      console.log('✅ [MealCountSetting] Refetch completed!');

      // 4. 모달 닫기
      setModalVisible(false);
      form.resetFields();
    },
    onError: (error: any) => {
      console.error('❌ [MealCountSetting] Save failed:', error);
      message.error(error.message || '설정 저장에 실패했습니다');
    },
  });

  // 선택한 사업장에 복제 Mutation
  const batchSaveMutation = useMutation({
    mutationFn: async (data: { siteIds: string[]; setting: Partial<MealCountSetting> }) => {
      const promises = data.siteIds.map(siteId =>
        upsertMealCountSetting(siteId, data.setting)
      );
      await Promise.all(promises);
    },
    onSuccess: async (_, variables) => {
      console.log('🎉 [MealCountSetting] Batch save successful!');
      message.success(`${variables.siteIds.length}개 사업장에 설정이 적용되었습니다`);

      // 1. 모든 관련 쿼리 무효화
      console.log('🗑️ [MealCountSetting] Invalidating queries...');
      await queryClient.invalidateQueries({
        queryKey: ['meal-count-settings-all'],
        refetchType: 'all'
      });

      // 2. 작은 지연 후 강제 리프레시
      console.log('⏳ [MealCountSetting] Waiting for server sync...');
      await new Promise(resolve => setTimeout(resolve, 500));

      // 3. 다시 한번 refetch 호출
      console.log('🔄 [MealCountSetting] Refetching data...');
      await refetchSettings();
      console.log('✅ [MealCountSetting] Refetch completed!');

      // 4. 모달 닫기
      setModalVisible(false);
      form.resetFields();
      setSelectedRowKeys([]);
    },
    onError: (error: any) => {
      console.error('❌ [MealCountSetting] Batch save failed:', error);
      message.error(error.message || '설정 복제에 실패했습니다');
    },
  });

  const handleOpenModal = (siteId?: string, isCopyMode = false) => {
    setCurrentSiteId(siteId);
    setCopyMode(isCopyMode);
    form.resetFields();

    if (siteId && !isCopyMode) {
      // 개별 사업장 수정
      const siteData = allSitesList.find(s => s.siteId === siteId);
      const setting = siteData?.setting;

      if (setting) {
        setBreakfastCount(setting.breakfastMenuCount || 1);
        setLunchCount(setting.lunchMenuCount || 1);
        setDinnerCount(setting.dinnerMenuCount || 1);
        setSupperCount(setting.supperMenuCount || 1);

        setTimeout(() => {
          const formValues: any = {
            breakfastDeadline: setting.breakfastDeadline ? dayjs(setting.breakfastDeadline, 'HH:mm') : undefined,
            lunchDeadline: setting.lunchDeadline ? dayjs(setting.lunchDeadline, 'HH:mm') : undefined,
            dinnerDeadline: setting.dinnerDeadline ? dayjs(setting.dinnerDeadline, 'HH:mm') : undefined,
            supperDeadline: setting.supperDeadline ? dayjs(setting.supperDeadline, 'HH:mm') : undefined,
            breakfastMenuCount: setting.breakfastMenuCount || 1,
            lunchMenuCount: setting.lunchMenuCount || 1,
            dinnerMenuCount: setting.dinnerMenuCount || 1,
            supperMenuCount: setting.supperMenuCount || 1,
            allowLateSubmission: setting.allowLateSubmission ?? false,
            isActive: setting.isActive ?? true,
          };

          // 메뉴명 필드 설정
          for (let i = 1; i <= 5; i++) {
            formValues[`breakfastMenu${i}Name`] = (setting as any)[`breakfastMenu${i}Name`] || '';
            formValues[`lunchMenu${i}Name`] = (setting as any)[`lunchMenu${i}Name`] || '';
            formValues[`dinnerMenu${i}Name`] = (setting as any)[`dinnerMenu${i}Name`] || '';
            formValues[`supperMenu${i}Name`] = (setting as any)[`supperMenu${i}Name`] || '';
          }

          form.setFieldsValue(formValues);
        }, 0);
      } else {
        setBreakfastCount(1);
        setLunchCount(1);
        setDinnerCount(1);
        setSupperCount(1);
      }
    } else {
      // 신규 또는 복제 모드
      setBreakfastCount(1);
      setLunchCount(1);
      setDinnerCount(1);
      setSupperCount(1);
      setTimeout(() => {
        form.setFieldsValue({
          breakfastMenuCount: 1,
          lunchMenuCount: 1,
          dinnerMenuCount: 1,
          supperMenuCount: 1,
          allowLateSubmission: false,
          isActive: true,
        });
      }, 0);
    }

    setModalVisible(true);
  };

  const handleSave = async () => {
    console.log('=== handleSave 호출됨 ===');
    console.log('copyMode:', copyMode);
    console.log('currentSiteId:', currentSiteId);

    try {
      console.log('🔍 Form 유효성 검사 시작...');
      const values = await form.validateFields();
      console.log('✅ Form validation 성공');
      console.log('Form values:', values);

      const settingData: Partial<MealCountSetting> = {
        breakfastDeadline: values.breakfastDeadline ? values.breakfastDeadline.format('HH:mm') : undefined,
        lunchDeadline: values.lunchDeadline ? values.lunchDeadline.format('HH:mm') : undefined,
        dinnerDeadline: values.dinnerDeadline ? values.dinnerDeadline.format('HH:mm') : undefined,
        supperDeadline: values.supperDeadline ? values.supperDeadline.format('HH:mm') : undefined,
        breakfastMenuCount: parseInt(values.breakfastMenuCount) ?? 0,
        lunchMenuCount: parseInt(values.lunchMenuCount) ?? 0,
        dinnerMenuCount: parseInt(values.dinnerMenuCount) ?? 0,
        supperMenuCount: parseInt(values.supperMenuCount) ?? 0,
        allowLateSubmission: values.allowLateSubmission,
        isActive: values.isActive,
      };

      // 메뉴명 필드 추가
      for (let i = 1; i <= 5; i++) {
        (settingData as any)[`breakfastMenu${i}Name`] = values[`breakfastMenu${i}Name`] || undefined;
        (settingData as any)[`lunchMenu${i}Name`] = values[`lunchMenu${i}Name`] || undefined;
        (settingData as any)[`dinnerMenu${i}Name`] = values[`dinnerMenu${i}Name`] || undefined;
        (settingData as any)[`supperMenu${i}Name`] = values[`supperMenu${i}Name`] || undefined;
      }

      console.log('📦 저장할 데이터:', JSON.stringify(settingData, null, 2));

      if (copyMode) {
        console.log('🔄 복제 모드 실행');
        if (selectedRowKeys.length === 0) {
          message.warning('사업장을 선택해주세요');
          return;
        }
        console.log('🚀 batchSaveMutation.mutateAsync 호출 시작...');
        await batchSaveMutation.mutateAsync({
          siteIds: selectedRowKeys as string[],
          setting: settingData,
        });
        console.log('✅ batchSaveMutation.mutateAsync 완료');
      } else if (currentSiteId) {
        console.log('💾 개별 저장 모드 실행 - siteId:', currentSiteId);
        console.log('🚀 saveMutation.mutateAsync 호출 시작...');

        try {
          const result = await saveMutation.mutateAsync({ siteId: currentSiteId, setting: settingData });
          console.log('✅ saveMutation.mutateAsync 완료 - 결과:', result);
        } catch (mutationError) {
          console.error('❌ saveMutation.mutateAsync 에러:', mutationError);
          throw mutationError;
        }
      } else {
        console.warn('⚠️ currentSiteId가 없습니다!');
      }
    } catch (error) {
      console.error('❌ Validation 또는 저장 실패:', error);
      if (error instanceof Error) {
        console.error('  에러 메시지:', error.message);
        console.error('  스택:', error.stack);
      }
    }
  };

  const rowSelection: TableRowSelection<SiteWithSetting> = {
    selectedRowKeys,
    onChange: (selectedKeys: React.Key[]) => {
      setSelectedRowKeys(selectedKeys);
    },
    getCheckboxProps: (record: SiteWithSetting) => ({
      name: record.siteName,
    }),
  };

  const columns = [
    {
      title: '사업장',
      dataIndex: 'siteName',
      key: 'siteName',
      width: 200,
      render: (_: any, record: SiteWithSetting) => (
        <Space direction="vertical" size={0}>
          <span style={{ fontWeight: 500 }}>{record.siteName}</span>
          <span style={{ fontSize: 12, color: '#999' }}>{record.division}</span>
        </Space>
      ),
    },
    {
      title: '타입',
      key: 'type',
      width: 100,
      render: (_: any, record: SiteWithSetting) => (
        <Tag color={SITE_TYPE_COLORS[record.siteType]}>
          {SITE_TYPE_LABELS[record.siteType] || record.siteType}
        </Tag>
      ),
    },
    {
      title: '조식 마감',
      key: 'breakfast',
      width: 150,
      render: (_: any, record: SiteWithSetting) => (
        record.setting?.breakfastDeadline ? (
          <Tag color="blue">전날 {record.setting.breakfastDeadline}</Tag>
        ) : (
          <span style={{ color: '#999' }}>미설정</span>
        )
      ),
    },
    {
      title: '중식 마감',
      key: 'lunch',
      width: 150,
      render: (_: any, record: SiteWithSetting) => (
        record.setting?.lunchDeadline ? (
          <Tag color="green">당일 {record.setting.lunchDeadline}</Tag>
        ) : (
          <span style={{ color: '#999' }}>미설정</span>
        )
      ),
    },
    {
      title: '석식 마감',
      key: 'dinner',
      width: 150,
      render: (_: any, record: SiteWithSetting) => (
        record.setting?.dinnerDeadline ? (
          <Tag color="orange">당일 {record.setting.dinnerDeadline}</Tag>
        ) : (
          <span style={{ color: '#999' }}>미설정</span>
        )
      ),
    },
    {
      title: '야식 마감',
      key: 'supper',
      width: 150,
      render: (_: any, record: SiteWithSetting) => (
        record.setting?.supperDeadline ? (
          <Tag color="purple">당일 {record.setting.supperDeadline}</Tag>
        ) : (
          <span style={{ color: '#999' }}>미설정</span>
        )
      ),
    },
    {
      title: '메뉴 개수',
      key: 'menuCount',
      width: 200,
      render: (_: any, record: SiteWithSetting) => {
        if (!record.setting) return <span style={{ color: '#999' }}>미설정</span>;
        return (
          <Space size={4}>
            <Tag color={record.setting.breakfastMenuCount === 0 ? 'default' : undefined}>조 {record.setting.breakfastMenuCount}개</Tag>
            <Tag color={record.setting.lunchMenuCount === 0 ? 'default' : undefined}>중 {record.setting.lunchMenuCount}개</Tag>
            <Tag color={record.setting.dinnerMenuCount === 0 ? 'default' : undefined}>석 {record.setting.dinnerMenuCount}개</Tag>
            <Tag color={record.setting.supperMenuCount === 0 ? 'default' : undefined}>야 {record.setting.supperMenuCount}개</Tag>
          </Space>
        );
      },
    },
    {
      title: '상태',
      key: 'status',
      width: 120,
      render: (_: any, record: SiteWithSetting) => {
        if (!record.setting) return <Tag>미설정</Tag>;
        return (
          <Space>
            {record.setting.isActive ? <Tag color="green">활성</Tag> : <Tag>비활성</Tag>}
            {record.setting.allowLateSubmission && <Tag color="orange">마감후허용</Tag>}
          </Space>
        );
      },
    },
    {
      title: '작업',
      key: 'actions',
      width: 100,
      fixed: 'right' as const,
      render: (_: any, record: SiteWithSetting) => (
        <Button
          type="link"
          size="small"
          icon={<EditOutlined />}
          onClick={() => handleOpenModal(record.siteId)}
        >
          {record.setting ? '수정' : '설정'}
        </Button>
      ),
    },
  ];

  const settingsCount = allSitesList.filter(s => s.setting).length;

  // 메뉴명 입력 필드 렌더링
  const renderMenuNameFields = (mealType: 'breakfast' | 'lunch' | 'dinner' | 'supper', count: number) => {
    const fields = [];
    for (let i = 1; i <= count; i++) {
      fields.push(
        <Col span={12} key={i}>
          <Form.Item
            label={`메뉴 ${i}`}
            name={`${mealType}Menu${i}Name`}
          >
            <Input placeholder={`메뉴 ${i} 이름 (예: 백반, 돈까스 등)`} />
          </Form.Item>
        </Col>
      );
    }
    return fields;
  };

  return (
    <div>
      {/* 헤더 */}
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 24 }}>
        <h1 style={{ margin: 0 }}>식수 마감시간 설정</h1>
      </div>

      {/* 안내 메시지 */}
      <Alert
        message="마감시간 설정 안내"
        description={
          <ul style={{ marginBottom: 0, paddingLeft: 20 }}>
            <li><strong>조식:</strong> 전날 저녁에 마감 (예: 전날 20:00)</li>
            <li><strong>중식/석식:</strong> 당일 마감 (예: 당일 10:00, 15:00)</li>
            <li><strong>메뉴명:</strong> 메뉴 개수를 설정하면 각 메뉴의 이름을 입력할 수 있습니다</li>
            <li><strong>일괄 적용:</strong> 사업장을 선택하고 "선택한 사업장에 설정 복제" 버튼을 클릭하세요</li>
          </ul>
        }
        type="info"
        showIcon
        style={{ marginBottom: 16 }}
      />

      {/* 설정 목록 테이블 */}
      <Card
        title={
          <Space>
            <span>전체 사업장 ({allSitesList.length}개)</span>
            <Tag color="green">설정됨 {settingsCount}개</Tag>
            <Tag color="default">미설정 {allSitesList.length - settingsCount}개</Tag>
          </Space>
        }
        extra={
          <Space>
            {selectedRowKeys.length > 0 && (
              <span style={{ color: '#1890ff' }}>
                {selectedRowKeys.length}개 선택됨
              </span>
            )}
            <Button
              type="primary"
              icon={<CopyOutlined />}
              onClick={() => handleOpenModal(undefined, true)}
              disabled={selectedRowKeys.length === 0}
            >
              선택한 사업장에 설정 복제
            </Button>
          </Space>
        }
      >
        <Table
          rowSelection={rowSelection}
          columns={columns}
          dataSource={allSitesList}
          rowKey="siteId"
          loading={sitesLoading || settingsLoading}
          pagination={{
            pageSize: 20,
            showSizeChanger: true,
            showTotal: (total) => `총 ${total}개`,
          }}
          scroll={{ x: 1400 }}
        />
      </Card>

      {/* 설정 모달 */}
      <Modal
        title={
          copyMode
            ? `선택한 ${selectedRowKeys.length}개 사업장에 설정 복제`
            : '마감시간 설정'
        }
        open={modalVisible}
        onOk={handleSave}
        onCancel={() => {
          setModalVisible(false);
          form.resetFields();
        }}
        confirmLoading={saveMutation.isPending || batchSaveMutation.isPending}
        okText={copyMode ? `${selectedRowKeys.length}개 사업장에 적용` : '저장'}
        cancelText="취소"
        width={900}
      >
        {copyMode && (
          <Alert
            message="설정 복제 안내"
            description={
              <div>
                <p>선택한 <strong>{selectedRowKeys.length}개 사업장</strong>에 동일한 설정이 적용됩니다:</p>
                <div style={{ maxHeight: 100, overflow: 'auto', backgroundColor: '#f5f5f5', padding: 8, borderRadius: 4 }}>
                  {selectedRowKeys.map(key => {
                    const site = allSitesList.find(s => s.siteId === key);
                    return site ? <Tag key={key} style={{ margin: 2 }}>{site.siteName}</Tag> : null;
                  })}
                </div>
              </div>
            }
            type="warning"
            showIcon
            style={{ marginBottom: 16 }}
          />
        )}

        <Form form={form} layout="vertical">
          {/* 마감 시간 설정 */}
          <Card title="마감 시간 설정" size="small" style={{ marginBottom: 16 }}>
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item
                  label={
                    <Space>
                      <span>조식 마감</span>
                      <Tag color="blue" style={{ fontSize: 11 }}>전날</Tag>
                    </Space>
                  }
                  name="breakfastDeadline"
                  tooltip="조식은 전날 저녁에 마감됩니다"
                >
                  <TimePicker style={{ width: '100%' }} format="HH:mm" minuteStep={10} placeholder="예: 20:00" />
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item
                  label={
                    <Space>
                      <span>중식 마감</span>
                      <Tag color="green" style={{ fontSize: 11 }}>당일</Tag>
                    </Space>
                  }
                  name="lunchDeadline"
                  tooltip="중식은 당일 오전에 마감됩니다"
                >
                  <TimePicker style={{ width: '100%' }} format="HH:mm" minuteStep={10} placeholder="예: 10:00" />
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item
                  label={
                    <Space>
                      <span>석식 마감</span>
                      <Tag color="orange" style={{ fontSize: 11 }}>당일</Tag>
                    </Space>
                  }
                  name="dinnerDeadline"
                  tooltip="석식은 당일 오후에 마감됩니다"
                >
                  <TimePicker style={{ width: '100%' }} format="HH:mm" minuteStep={10} placeholder="예: 15:00" />
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item
                  label={
                    <Space>
                      <span>야식 마감</span>
                      <Tag color="purple" style={{ fontSize: 11 }}>당일</Tag>
                    </Space>
                  }
                  name="supperDeadline"
                  tooltip="야식은 당일 저녁에 마감됩니다"
                >
                  <TimePicker style={{ width: '100%' }} format="HH:mm" minuteStep={10} placeholder="예: 18:00" />
                </Form.Item>
              </Col>
            </Row>
          </Card>

          {/* 조식 메뉴 설정 */}
          <Card title="조식 메뉴 설정" size="small" style={{ marginBottom: 16 }}>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item label="메뉴 개수" name="breakfastMenuCount" rules={[{ required: true }]}>
                  <Input
                    type="number"
                    min={0}
                    max={5}
                    suffix="개"
                    onChange={(e) => setBreakfastCount(Math.min(5, Math.max(0, parseInt(e.target.value) || 0)))}
                  />
                </Form.Item>
              </Col>
              {breakfastCount > 0 && renderMenuNameFields('breakfast', breakfastCount)}
            </Row>
          </Card>

          {/* 중식 메뉴 설정 */}
          <Card title="중식 메뉴 설정" size="small" style={{ marginBottom: 16 }}>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item label="메뉴 개수" name="lunchMenuCount" rules={[{ required: true }]}>
                  <Input
                    type="number"
                    min={0}
                    max={5}
                    suffix="개"
                    onChange={(e) => setLunchCount(Math.min(5, Math.max(0, parseInt(e.target.value) || 0)))}
                  />
                </Form.Item>
              </Col>
              {lunchCount > 0 && renderMenuNameFields('lunch', lunchCount)}
            </Row>
          </Card>

          {/* 석식 메뉴 설정 */}
          <Card title="석식 메뉴 설정" size="small" style={{ marginBottom: 16 }}>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item label="메뉴 개수" name="dinnerMenuCount" rules={[{ required: true }]}>
                  <Input
                    type="number"
                    min={0}
                    max={5}
                    suffix="개"
                    onChange={(e) => setDinnerCount(Math.min(5, Math.max(0, parseInt(e.target.value) || 0)))}
                  />
                </Form.Item>
              </Col>
              {dinnerCount > 0 && renderMenuNameFields('dinner', dinnerCount)}
            </Row>
          </Card>

          {/* 야식 메뉴 설정 */}
          <Card title="야식 메뉴 설정" size="small" style={{ marginBottom: 16 }}>
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item label="메뉴 개수" name="supperMenuCount" rules={[{ required: true }]}>
                  <Input
                    type="number"
                    min={0}
                    max={5}
                    suffix="개"
                    onChange={(e) => setSupperCount(Math.min(5, Math.max(0, parseInt(e.target.value) || 0)))}
                  />
                </Form.Item>
              </Col>
              {supperCount > 0 && renderMenuNameFields('supper', supperCount)}
            </Row>
          </Card>

          {/* 기타 설정 */}
          <Card title="기타 설정" size="small">
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item label="마감 후 입력 허용" name="allowLateSubmission" valuePropName="checked">
                  <Switch checkedChildren="허용" unCheckedChildren="불허" />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="설정 활성화" name="isActive" valuePropName="checked">
                  <Switch checkedChildren="활성" unCheckedChildren="비활성" />
                </Form.Item>
              </Col>
            </Row>
          </Card>
        </Form>
      </Modal>
    </div>
  );
}
