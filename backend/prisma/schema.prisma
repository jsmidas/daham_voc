generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String?
  password            String
  name                String
  phone               String               @unique
  role                Role                 @default(SITE_STAFF)
  division            Division?
  isActive            Boolean              @default(true)
  lastLoginAt         DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  attendances         Attendance[]
  feedbacks           CustomerFeedback[]
  mealCounts          MealCount[]
  mealPhotos          MealPhoto[]
  staff               Staff?
  deliveryAssignments DeliveryAssignment[]
  deliveryLogs        DeliveryLog[]

  @@index([phone])
  @@index([email])
  @@index([role])
  @@index([division])
}

model Staff {
  id            String      @id @default(uuid())
  userId        String      @unique
  employeeNo    String?     @unique
  department    String?
  position      String?
  managerId     String?
  averageRating Float       @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  manager       Staff?      @relation("StaffHierarchy", fields: [managerId], references: [id])
  subordinates  Staff[]     @relation("StaffHierarchy")
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  staffSites    StaffSite[]

  @@index([managerId])
  @@index([department])
  @@index([employeeNo])
}

model MenuType {
  id                  String               @id @default(uuid())
  name                String               @unique
  description         String?
  price               Decimal?             @db.Decimal(10, 2)
  sortOrder           Int                  @default(0)
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  division            Division?            @default(HQ)
  siteMenuTypes       SiteMenuType[]
  weeklyMenuTemplates WeeklyMenuTemplate[]

  @@index([sortOrder])
  @@index([division])
}

model SiteMenuType {
  id         String   @id @default(uuid())
  siteId     String
  menuTypeId String
  createdAt  DateTime @default(now())
  menuType   MenuType @relation(fields: [menuTypeId], references: [id], onDelete: Cascade)
  site       Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, menuTypeId])
  @@index([siteId])
  @@index([menuTypeId])
}

model SiteGroup {
  id          String      @id @default(uuid())
  name        String
  division    Division
  description String?
  markerShape MarkerShape @default(CIRCLE)
  markerColor String      @default("#1890ff")
  sortOrder   Int         @default(0)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  sites       Site[]

  @@unique([division, name])
  @@index([division])
  @@index([sortOrder])
}

model Site {
  id                 String              @id @default(uuid())
  name               String
  type               SiteType
  division           Division
  groupId            String?
  address            String
  latitude           Float
  longitude          Float
  contactPerson1     String?
  contactPhone1      String?
  contactPerson2     String?
  contactPhone2      String?
  pricePerMeal       Decimal?            @db.Decimal(10, 2)
  deliveryRoute      String?
  contractStartDate  DateTime?           @db.Date
  contractEndDate    DateTime?           @db.Date
  sortOrder          Int                 @default(0)
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deletedAt          DateTime?
  attendances        Attendance[]
  attendanceSettings AttendanceSetting[]
  feedbacks          CustomerFeedback[]
  mealCounts         MealCount[]
  mealCountSetting   MealCountSetting?
  mealPhotos         MealPhoto[]
  menus              Menu[]
  group              SiteGroup?          @relation(fields: [groupId], references: [id])
  siteMenuTypes      SiteMenuType[]
  staffSites         StaffSite[]
  deliveryLogs       DeliveryLog[]
  routeStops         DeliveryRouteStop[]

  @@index([type])
  @@index([division])
  @@index([groupId])
  @@index([isActive])
}

model StaffSite {
  id         String    @id @default(uuid())
  staffId    String
  siteId     String
  isPrimary  Boolean   @default(false)
  assignedAt DateTime  @default(now())
  removedAt  DateTime?
  site       Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  staff      Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, siteId])
  @@index([staffId])
  @@index([siteId])
}

model Menu {
  id           String    @id @default(uuid())
  siteId       String
  startDate    DateTime  @db.Date
  endDate      DateTime  @db.Date
  mealType     MealType
  imageUrl     String?
  thumbnailUrl String?
  menuItems    String?
  mongoMetaId  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  site         Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId, startDate])
  @@index([startDate])
}

model WeeklyMenuTemplate {
  id           String    @id @default(uuid())
  menuTypeId   String
  year         Int
  weekNumber   Int
  imageUrl     String
  thumbnailUrl String?
  description  String?
  createdBy    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  menuType     MenuType  @relation(fields: [menuTypeId], references: [id], onDelete: Cascade)

  @@unique([menuTypeId, year, weekNumber])
  @@index([menuTypeId])
  @@index([year, weekNumber])
}

model MealPhoto {
  id           String    @id @default(uuid())
  siteId       String
  uploaderId   String
  imageUrl     String
  thumbnailUrl String?
  mealType     MealType?
  photoType    PhotoType @default(SERVING)
  capturedAt   DateTime
  latitude     Float?
  longitude    Float?
  feedback     String?
  isChecked    Boolean   @default(false)
  checkedBy    String?
  checkedAt    DateTime?
  mongoMetaId  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  site         Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  uploader     User      @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([siteId, capturedAt])
  @@index([uploaderId])
  @@index([capturedAt])
}

model CustomerFeedback {
  id           String             @id @default(uuid())
  siteId       String
  authorId     String
  authorType   FeedbackAuthorType
  content      String
  rating       Int?               @default(0)
  feedbackDate DateTime           @default(now()) @db.Date
  mealType     MealType?
  status       FeedbackStatus     @default(PENDING)
  adminReply   String?
  repliedAt    DateTime?
  repliedBy    String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
  author       User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  site         Site               @relation(fields: [siteId], references: [id], onDelete: Cascade)
  images       FeedbackImage[]

  @@index([siteId, status])
  @@index([authorId])
  @@index([status])
  @@index([createdAt])
  @@index([feedbackDate])
}

model FeedbackImage {
  id           String           @id @default(uuid())
  feedbackId   String
  imageUrl     String
  thumbnailUrl String?
  sortOrder    Int              @default(0)
  createdAt    DateTime         @default(now())
  deletedAt    DateTime?
  feedback     CustomerFeedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@index([feedbackId])
  @@index([feedbackId, sortOrder])
}

model Attendance {
  id             String           @id @default(uuid())
  userId         String
  siteId         String
  checkInTime    DateTime
  checkInLat     Float?
  checkInLng     Float?
  checkOutTime   DateTime?
  checkOutLat    Float?
  checkOutLng    Float?
  breakStartTime DateTime?
  breakEndTime   DateTime?
  status         AttendanceStatus @default(NORMAL)
  note           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  site           Site             @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, checkInTime])
  @@index([siteId, checkInTime])
  @@index([checkInTime])
}

model AttendanceSetting {
  id               String   @id @default(uuid())
  siteId           String
  expectedCheckIn  String
  expectedCheckOut String
  allowedRadius    Int      @default(100)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  site             Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId])
}

model MealCountSetting {
  id                  String   @id @default(uuid())
  siteId              String   @unique
  // 새로운 방식: 각 끼니별 직접 마감 시간 설정
  breakfastDeadline   String?  // 전날 마감 시간 (예: "20:00")
  lunchDeadline       String?  // 당일 마감 시간 (예: "10:00")
  dinnerDeadline      String?  // 당일 마감 시간 (예: "15:00")
  supperDeadline      String?  // 당일 마감 시간 (예: "18:00")
  // 기존 방식 (하위 호환성 유지, 추후 제거 예정)
  deadlineHoursBefore Int?     @default(24)
  breakfastStartTime  String?
  lunchStartTime      String?
  dinnerStartTime     String?
  // 메뉴 설정
  breakfastMenuCount  Int      @default(1)
  lunchMenuCount      Int      @default(1)
  dinnerMenuCount     Int      @default(1)
  supperMenuCount     Int      @default(1)
  breakfastMenu1Name  String?
  breakfastMenu2Name  String?
  breakfastMenu3Name  String?
  breakfastMenu4Name  String?
  breakfastMenu5Name  String?
  lunchMenu1Name      String?
  lunchMenu2Name      String?
  lunchMenu3Name      String?
  lunchMenu4Name      String?
  lunchMenu5Name      String?
  dinnerMenu1Name     String?
  dinnerMenu2Name     String?
  dinnerMenu3Name     String?
  dinnerMenu4Name     String?
  dinnerMenu5Name     String?
  supperMenu1Name     String?
  supperMenu2Name     String?
  supperMenu3Name     String?
  supperMenu4Name     String?
  supperMenu5Name     String?
  allowLateSubmission Boolean  @default(false)
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  site                Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId])
}

model MealCount {
  id          String   @id @default(uuid())
  siteId      String
  date        DateTime @db.Date
  mealType    MealType
  menuNumber  Int      @default(1)
  count       Int
  submittedBy String
  submittedAt DateTime @default(now())
  isLate      Boolean  @default(false)
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  submitter   User     @relation(fields: [submittedBy], references: [id], onDelete: Cascade)

  @@unique([siteId, date, mealType, menuNumber])
  @@index([siteId, date])
  @@index([date])
}

model DeliveryRoute {
  id           String               @id @default(uuid())
  name         String               @unique
  code         String               @unique
  division     Division
  description  String?
  color        String               @default("#1890ff")
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  deletedAt    DateTime?
  markerShape  MarkerShape          @default(CIRCLE)
  assignments  DeliveryAssignment[]
  deliveryLogs DeliveryLog[]
  routeStops   DeliveryRouteStop[]

  @@index([division])
  @@index([isActive])
  @@map("delivery_routes")
}

model DeliveryRouteStop {
  id                String        @id @default(uuid())
  routeId           String
  siteId            String
  stopNumber        Int
  estimatedArrival  String?
  estimatedDuration Int?
  notes             String?
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  route             DeliveryRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)
  site              Site          @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([routeId, siteId])
  @@unique([routeId, stopNumber])
  @@index([routeId, stopNumber])
  @@index([siteId])
  @@map("delivery_route_stops")
}

model DeliveryAssignment {
  id         String        @id @default(uuid())
  routeId    String
  driverId   String
  assignedAt DateTime      @default(now())
  removedAt  DateTime?
  isActive   Boolean       @default(true)
  driver     User          @relation(fields: [driverId], references: [id], onDelete: Cascade)
  route      DeliveryRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@unique([routeId, driverId])
  @@index([driverId])
  @@index([routeId])
  @@map("delivery_assignments")
}

model DeliveryLog {
  id             String         @id @default(uuid())
  routeId        String
  siteId         String
  driverId       String
  deliveryDate   DateTime       @db.Date
  stopNumber     Int
  arrivedAt      DateTime?
  departedAt     DateTime?
  arrivalLat     Float?
  arrivalLng     Float?
  departureLat   Float?
  departureLng   Float?
  status         DeliveryStatus @default(PENDING)
  actualDuration Int?
  distanceKm     Float?
  note           String?
  issueReported  Boolean        @default(false)
  issueDetail    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  driver         User           @relation(fields: [driverId], references: [id], onDelete: Cascade)
  route          DeliveryRoute  @relation(fields: [routeId], references: [id], onDelete: Cascade)
  site           Site           @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([routeId, siteId, deliveryDate])
  @@index([deliveryDate])
  @@index([driverId, deliveryDate])
  @@index([routeId, deliveryDate])
  @@index([status])
  @@map("delivery_logs")
}

enum Role {
  SUPER_ADMIN
  HQ_ADMIN
  YEONGNAM_ADMIN
  GROUP_MANAGER
  SITE_MANAGER
  SITE_STAFF
  DELIVERY_DRIVER
  CLIENT
}

enum Division {
  HQ
  YEONGNAM
}

enum MarkerShape {
  CIRCLE
  SQUARE
  DIAMOND
  HEART
  SPADE
  CLUB
  STAR
  TRIANGLE
}

enum SiteType {
  CONSIGNMENT
  DELIVERY
  LUNCHBOX
  EVENT
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SUPPER
}

enum PhotoType {
  SERVING
  LEFTOVER
  FACILITY
}

enum FeedbackAuthorType {
  STAFF
  CLIENT
}

enum FeedbackStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum AttendanceStatus {
  NORMAL
  LATE
  EARLY_LEAVE
  OUTSIDE_RANGE
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  ARRIVED
  COMPLETED
  DELAYED
  ISSUE
}
