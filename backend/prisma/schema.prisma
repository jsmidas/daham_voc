generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String             @id @default(uuid())
  email       String?
  password    String
  name        String
  phone       String             @unique
  role        Role               @default(SITE_STAFF)
  division    Division?
  isActive    Boolean            @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  attendances Attendance[]
  feedbacks   CustomerFeedback[]
  mealCounts  MealCount[]
  mealPhotos  MealPhoto[]
  staff       Staff?

  @@index([phone])
  @@index([email])
  @@index([role])
  @@index([division])
}

model Staff {
  id            String      @id @default(uuid())
  userId        String      @unique
  employeeNo    String?     @unique
  department    String?
  position      String?
  managerId     String?
  averageRating Float       @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  deletedAt     DateTime?
  manager       Staff?      @relation("StaffHierarchy", fields: [managerId], references: [id])
  subordinates  Staff[]     @relation("StaffHierarchy")
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  staffSites    StaffSite[]

  @@index([managerId])
  @@index([department])
  @@index([employeeNo])
}

model MenuType {
  id                  String               @id @default(uuid())
  name                String               @unique
  description         String?
  price               Decimal?             @db.Decimal(10, 2)
  sortOrder           Int                  @default(0)
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  deletedAt           DateTime?
  siteMenuTypes       SiteMenuType[]
  weeklyMenuTemplates WeeklyMenuTemplate[]

  @@index([sortOrder])
}

model SiteMenuType {
  id         String   @id @default(uuid())
  siteId     String
  menuTypeId String
  createdAt  DateTime @default(now())
  menuType   MenuType @relation(fields: [menuTypeId], references: [id], onDelete: Cascade)
  site       Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@unique([siteId, menuTypeId])
  @@index([siteId])
  @@index([menuTypeId])
}

model SiteGroup {
  id          String      @id @default(uuid())
  name        String
  division    Division
  description String?
  markerShape MarkerShape @default(CIRCLE)
  markerColor String      @default("#1890ff")
  sortOrder   Int         @default(0)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  sites       Site[]

  @@unique([division, name])
  @@index([division])
  @@index([sortOrder])
}

model Site {
  id                 String              @id @default(uuid())
  name               String
  type               SiteType
  division           Division
  groupId            String?
  address            String
  latitude           Float
  longitude          Float
  contactPerson1     String?
  contactPhone1      String?
  contactPerson2     String?
  contactPhone2      String?
  pricePerMeal       Decimal?            @db.Decimal(10, 2)
  deliveryRoute      String?
  contractStartDate  DateTime?           @db.Date
  contractEndDate    DateTime?           @db.Date
  sortOrder          Int                 @default(0)
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deletedAt          DateTime?
  attendances        Attendance[]
  attendanceSettings AttendanceSetting[]
  feedbacks          CustomerFeedback[]
  mealCounts         MealCount[]
  mealCountSetting   MealCountSetting?
  mealPhotos         MealPhoto[]
  menus              Menu[]
  group              SiteGroup?          @relation(fields: [groupId], references: [id])
  siteMenuTypes      SiteMenuType[]
  staffSites         StaffSite[]

  @@index([type])
  @@index([division])
  @@index([groupId])
  @@index([isActive])
}

model StaffSite {
  id         String    @id @default(uuid())
  staffId    String
  siteId     String
  isPrimary  Boolean   @default(false)
  assignedAt DateTime  @default(now())
  removedAt  DateTime?
  site       Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  staff      Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, siteId])
  @@index([staffId])
  @@index([siteId])
}

model Menu {
  id           String    @id @default(uuid())
  siteId       String
  startDate    DateTime  @db.Date
  endDate      DateTime  @db.Date
  mealType     MealType
  imageUrl     String?
  thumbnailUrl String?
  menuItems    String?
  mongoMetaId  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  site         Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId, startDate])
  @@index([startDate])
}

model WeeklyMenuTemplate {
  id           String    @id @default(uuid())
  menuTypeId   String
  year         Int
  weekNumber   Int
  imageUrl     String
  thumbnailUrl String?
  description  String?
  createdBy    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  menuType     MenuType  @relation(fields: [menuTypeId], references: [id], onDelete: Cascade)

  @@unique([menuTypeId, year, weekNumber])
  @@index([menuTypeId])
  @@index([year, weekNumber])
}

model MealPhoto {
  id           String    @id @default(uuid())
  siteId       String
  uploaderId   String
  imageUrl     String
  thumbnailUrl String?
  mealType     MealType?
  photoType    PhotoType @default(SERVING)
  capturedAt   DateTime
  latitude     Float?
  longitude    Float?
  feedback     String?
  isChecked    Boolean   @default(false)
  checkedBy    String?
  checkedAt    DateTime?
  mongoMetaId  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  site         Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  uploader     User      @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  @@index([siteId, capturedAt])
  @@index([uploaderId])
  @@index([capturedAt])
}

model CustomerFeedback {
  id           String             @id @default(uuid())
  siteId       String
  authorId     String
  authorType   FeedbackAuthorType
  content      String
  rating       Int?               @default(0)
  feedbackDate DateTime           @default(now()) @db.Date
  mealType     MealType?
  status       FeedbackStatus     @default(PENDING)
  adminReply   String?
  repliedAt    DateTime?
  repliedBy    String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
  author       User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  site         Site               @relation(fields: [siteId], references: [id], onDelete: Cascade)
  images       FeedbackImage[]

  @@index([siteId, status])
  @@index([authorId])
  @@index([status])
  @@index([createdAt])
  @@index([feedbackDate])
}

model FeedbackImage {
  id           String           @id @default(uuid())
  feedbackId   String
  imageUrl     String
  thumbnailUrl String?
  sortOrder    Int              @default(0)
  createdAt    DateTime         @default(now())
  deletedAt    DateTime?
  feedback     CustomerFeedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@index([feedbackId])
  @@index([feedbackId, sortOrder])
}

model Attendance {
  id             String           @id @default(uuid())
  userId         String
  siteId         String
  checkInTime    DateTime
  checkInLat     Float?
  checkInLng     Float?
  checkOutTime   DateTime?
  checkOutLat    Float?
  checkOutLng    Float?
  breakStartTime DateTime?
  breakEndTime   DateTime?
  status         AttendanceStatus @default(NORMAL)
  note           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  site           Site             @relation(fields: [siteId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, checkInTime])
  @@index([siteId, checkInTime])
  @@index([checkInTime])
}

model AttendanceSetting {
  id               String   @id @default(uuid())
  siteId           String
  expectedCheckIn  String
  expectedCheckOut String
  allowedRadius    Int      @default(100)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  site             Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId])
}

model MealCountSetting {
  id                  String   @id @default(uuid())
  siteId              String   @unique
  deadlineHoursBefore Int      @default(24)
  breakfastStartTime  String?
  lunchStartTime      String?
  dinnerStartTime     String?
  allowLateSubmission Boolean  @default(false)
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  site                Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId])
}

model MealCount {
  id          String   @id @default(uuid())
  siteId      String
  date        DateTime @db.Date
  mealType    MealType
  count       Int
  submittedBy String
  submittedAt DateTime @default(now())
  isLate      Boolean  @default(false)
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  submitter   User     @relation(fields: [submittedBy], references: [id], onDelete: Cascade)

  @@unique([siteId, date, mealType])
  @@index([siteId, date])
  @@index([date])
}

enum Role {
  SUPER_ADMIN
  HQ_ADMIN
  YEONGNAM_ADMIN
  GROUP_MANAGER
  SITE_MANAGER
  SITE_STAFF
  DELIVERY_DRIVER
  CLIENT
}

enum Division {
  HQ
  YEONGNAM
}

enum MarkerShape {
  CIRCLE
  SQUARE
  DIAMOND
  HEART
  SPADE
  CLUB
  STAR
  TRIANGLE
}

enum SiteType {
  CONSIGNMENT
  DELIVERY
  LUNCHBOX
  EVENT
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SUPPER
}

enum PhotoType {
  SERVING
  LEFTOVER
  FACILITY
}

enum FeedbackAuthorType {
  STAFF
  CLIENT
}

enum FeedbackStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum AttendanceStatus {
  NORMAL
  LATE
  EARLY_LEAVE
  OUTSIDE_RANGE
}
